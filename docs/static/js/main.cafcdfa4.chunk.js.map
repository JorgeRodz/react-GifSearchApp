{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","GifSearchApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","categories","find","categorie","alert","placeholder","type","onChange","target","value","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","api_url","encodeURI","fetch","res","json","data","gifs","map","img","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGrid","GifSearchApp","ReactDOM","render","document","getElementById"],"mappings":"mMAgDeA,EA5CK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAyBA,OACE,uBAAMC,SApBa,SAACC,GACpBA,EAAMC,iBAEDJ,EAAWK,QAEhBP,GAAc,SAACQ,GAGb,OAFiBA,EAAWC,MAAK,SAACC,GAAD,OAAeA,IAAcR,MAG5DS,MAAM,qDACNR,EAAc,IACP,YAAIK,KAGbL,EAAc,IACR,CAAED,GAAR,mBAAuBM,SAKzB,UAEE,kFACA,uBACEI,YAAY,gBACZC,KAAK,OACLC,SA9BiB,SAACT,GACtBF,EAAcE,EAAMU,OAAOC,QA8BvBA,MAAOd,Q,QCvBAe,EAZK,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEhC,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,kCAAKA,EAAL,W,uBCROK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEqCC,UAAUH,GAF/C,wEAKDI,MAAMF,GALL,cAKbG,EALa,gBAMIA,EAAIC,OANR,uBAMXC,EANW,EAMXA,KAGFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLjB,GAAIiB,EAAIjB,GACRC,MAAOgB,EAAIhB,MACXC,IAAG,UAAEe,EAAIC,cAAN,aAAE,EAAYC,iBAAiBjB,QAbnB,kBAiBZa,GAjBY,yCAmBnBtB,MAAM,EAAD,IAnBc,kFAAH,sDCqBL2B,EAlBM,SAACb,GACpB,MAA0BxB,mBAAS,CACjC+B,KAAM,GACNO,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRlB,EAAQC,GAAUkB,MAAK,SAACC,GACtBH,EAAS,CACPT,KAAMY,EACNL,SAAS,SAGZ,CAACd,IAEGe,GCkBMK,EA9BC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SACjB,EAAkCa,EAAab,GAAjCW,EAAd,EAAQJ,KAAcO,EAAtB,EAAsBA,QAEtB,OACE,qCACE,qBAAIlB,UAAU,oCAAd,gCAAuDI,EAAvD,OAGEc,GACE,mBAAGlB,UAAU,mCAAb,wBAIJ,qBAAKA,UAAU,aAAf,SAGIe,EAAOF,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,eAEOA,GADCA,EAAIjB,aCIP4B,EAxBM,WACnB,MAAoC7C,mBAAS,CAAC,cAA9C,mBAAOO,EAAP,KAAmBR,EAAnB,KAEA,OACE,qCACE,gFACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAGIQ,EAAW0B,KAAI,SAACT,GAAD,OACb,cAAC,EAAD,CAEEA,SAAUA,GADLA,Y,MCbnBsB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.cafcdfa4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleOnChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!inputValue.trim()) return;\r\n\r\n    setCategories((categories) => {\r\n      const repetead = categories.find((categorie) => categorie === inputValue);\r\n\r\n      if (repetead) {\r\n        alert(\"No puede haber dos categorias con el mismo nombre\");\r\n        setInputValue(\"\");\r\n        return [...categories];\r\n      }\r\n\r\n      setInputValue(\"\");\r\n      return [inputValue, ...categories];\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {/* prettier-ignore*/}\r\n      <label>Introduce el nombre del gif que deseas buscar</label>\r\n      <input\r\n        placeholder=\"Dragon ball z\"\r\n        type=\"text\"\r\n        onChange={handleOnChange}\r\n        value={inputValue}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n  // prettier-ignore\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p> {title} </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nGifGridItem.propTypes = {};\r\n\r\nexport default GifGridItem;\r\n\r\n/*\r\n\r\n  1. Enzyme\r\n  2. Enzyme to Json\r\n  3. Debe de mostrar el component correctamente\r\n    - shallow\r\n    - wrapper\r\n    - wrapper .toMatchSnapshot()\r\n\r\n*/\r\n","export const getGifs = async (category) => {\r\n  // prettier-ignore\r\n  const api_url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=FALxPRXmvsWA6VSWSDY8ILjMkn7AyycO`;\r\n\r\n  try {\r\n    const res = await fetch(api_url);\r\n    const { data } = await res.json(); // here we retrive the data\r\n\r\n    // Para obtener solo los datos que necesitamos\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n\r\n    return gifs;\r\n  } catch (error) {\r\n    alert(error);\r\n    return error;\r\n  }\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"./../helpers/getGifs\";\r\n\r\nconst useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n\r\nexport default useFetchGifs;\r\n","import React from \"react\";\r\n// import { useState, useEffect } from \"react\";\r\nimport GifGridItem from \"./GifGridItem\";\r\nimport useFetchGifs from \"../hooks/useFetchGifs\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h2 className=\"animate__animated animate__fadeIn\">üëâÔ∏è {category} </h2>\r\n      {\r\n        /* Cuando \"loading\" pasa a \"false\" no se renderiza nada; es como si pasaramos null */\r\n        loading && (\r\n          <p className=\"animate__animated animate__flash\">Loading...</p>\r\n        )\r\n      }\r\n\r\n      <div className=\"card__grid\">\r\n        {\r\n          // prettier-ignore\r\n          images.map((img) => (\r\n          <GifGridItem\r\n            key={ img.id } // Propiedad requerida para que cada componente de la lista sea unico; esto con la finalidad de aplicar comportamientos individuales a cada elemento si se requiere de ello.\r\n            { ...img } // estas son las props que pasamos al componente; usamos desestructuracion para pasarlas individualmente.\r\n          />\r\n        ))\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nGifGrid.propTypes = {};\r\n\r\nexport default GifGrid;\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifSearchApp = () => {\r\n  const [categories, setCategories] = useState([\"One piece\"]);\r\n\r\n  return (\r\n    <>\r\n      <h1>üîçÔ∏è Gif Search APP üîé</h1>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {\r\n          // prettier-ignore\r\n          categories.map((category) => (\r\n            <GifGrid\r\n              key={category}\r\n              category={category}\r\n            />\r\n          ))\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifSearchApp;\r\n","import ReactDOM from \"react-dom\";\nimport GifSearchApp from \"./GifSearchApp\";\nimport \"./index.css\";\n\n// prettier-ignore\nReactDOM.render(\n  <GifSearchApp />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}